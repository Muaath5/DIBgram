{"version":3,"sources":["remove-item-from-array.js","dibgram/TdWeb/tdlib.js","dibgram/TdWeb/config.js","dibgram/auth/auth.js","dibgram/ui/elements/highlighted-button.js","dibgram/ui/elements/loading-spinner.js","dibgram/ui/elements/connecting.js","dibgram/messenger/chat-filters.js","dibgram/messenger/ui/navigation-menu/chat-folders.js","dibgram/messenger/ui/navigation-menu/navigation-menu.js","dibgram/messenger/messengerWindow.js","dibgram/ui/elements/underlined-input.js","dibgram/auth/ui.js","App.js","reportWebVitals.js","index.js"],"names":["Array","prototype","remove","item","i","this","length","splice","TdLib","log","use_test_dc","log_updates","log_queries","TdClient","useDatabase","onUpdate","update","console","forEach","h","sendQuery","type","handler","undefined","push","query","send","registerUpdateHandler","credentials","api_id","api_hash","auth_state","number","code","pass","first","last","BigHighlightedButton","props","className","onClick","children","LoadingSpinner","state","percentage","percent","caps","trackColor","spin","transitionDuration","intervalNum","setInterval","setState","clearInterval","React","Component","size","PropTypes","isRequired","lineWidth","progressColor","string","ConnectionState","cState","handleUpdate","includes","chatFiltersStore","createStore","action","payload","window","__REDUX_DEVTOOLS_EXTENSION__","chat_filters","dispatch","ChatFolderList","id","NavMenu","connect","useFolders","NavigationMenu","store","MessengerWindow","UnderlinedInput","args","handleFocus","inactive","titleClass","getTitleClass","handleBlur","mouseX","handleMouseDown","e","nativeEvent","offsetX","handleKeyDown","key","onEnterKeyPressed","autoFocus","focus","value","invalid","style","title","onChange","onMouseDown","onFocus","onBlur","onKeyDown","maxLength","onCopy","disableCopy","preventDefault","initialAuthState","setInitialAuthState","MainApp","step","info","code_info","location","reload","AuthWindowStepPhoneNumber","handlePNFieldChange","event","target","submitNumber","a","Auth","givePhoneNumber","catch","reason","textUnderField","message","AuthWindowStepCode","handleCodeFieldChange","handleContinueButton","checkAuthCode","phone_number","AuthWindowStepPassword","password","handlePasswordFieldChange","check2FACode","password_hint","href","AuthWindowStepRegister","firstName","lastName","handleFirstNameFieldChange","handleLastNameFieldChange","registerNewAccount","initializeTdLib","then","res","App","data-theme","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c49350a8.chunk.js","sourcesContent":["// https://love2dev.com/blog/javascript-remove-from-array/#remove-from-array-splice\nArray.prototype.remove = function (item) {\n    for( var i = 0; i < this.length; i++){ \n        if ( this[i] === item) { \n            this.splice(i, 1); \n        }\n    }\n};\n\nexport default Array.prototype.remove;","import TdClient from 'tdweb';\nimport {getConfig} from './config';\nimport '../../remove-item-from-array';\n\n/**\n * Provides options to communicate with the Tdweb library\n */\nexport default class TdLib {\n    /** @type TdClient */\n    static #tdClient;\n    /** @type {[string: Array<Function>]} */\n    static #updateHandlers={};\n\n    /**\n     * Creates the instance of Tdweb\n     */\n    static async initializeTdLib() {\n        const {log}= getConfig();\n        TdLib.#tdClient= new TdClient({\n            useDatabase: true,\n            onUpdate: function (update) {\n                if(log.log_updates) {\n                    console.log('Update: ',update);\n                }\n                if(TdLib.#updateHandlers[update['@type']]){\n                    TdLib.#updateHandlers[update['@type']].forEach(h => h(update));\n                }\n            }\n        });\n        return await TdLib.sendQuery({'@type': 'getAuthorizationState'});\n    }\n\n    /**\n     * Listen for updates from TdLib\n     * @param {string} type The type of the update to listen to. Look for TdLib API docs for types\n     * @param {Function} handler The function that gets called with the update object when the update is received\n     */\n    static registerUpdateHandler(type, handler) {\n        if(TdLib.#updateHandlers[type]===undefined){\n            TdLib.#updateHandlers[type]= [];\n        }\n        TdLib.#updateHandlers[type].push(handler);\n    }\n\n    /**\n     * Remove an existing update handler\n     * @param {string} type The type of the update to remove handler from. Look for TdLib API docs for types\n     * @param {Function} handler The handler to remove\n     */\n    static unRegisterUpdateHandler(type, handler) {\n        if(TdLib.#updateHandlers[type]===undefined){\n            return;\n        }\n        TdLib.#updateHandlers.remove(handler);\n    }\n\n    /**\n     * Send a request to the TdLib instance\n     * If the query contains an `@extra` field, the same field will be added to the result\n     * @param {import('tdweb').TdObject} query The request to send. Consult TdLib & JSON interface API for help.\n     */\n    static sendQuery(query) {\n        const {log}= getConfig();\n        if(log.log_queries) {\n            console.log('Query: ',query);\n        }\n        return TdLib.#tdClient.send(query);\n    }\n}","export function getCredentials() {return {api_id: 3022678,api_hash: 'd7b7676a82906a6182f4a5e5e9555673'};}export function getConfig() {return {use_test_dc: false,log: {log_updates: false,log_queries: false}};}\n","import TdLib from '../TdWeb/tdlib';\nimport {getCredentials, getConfig} from '../TdWeb/config';\n\nTdLib.registerUpdateHandler('updateAuthorizationState',function (update) {\n    const credentials= getCredentials();\n    const auth_state= update['authorization_state'];\n    \n    if(auth_state['@type']==='authorizationStateWaitEncryptionKey'){\n        TdLib.sendQuery({'@type': 'checkDatabaseEncryptionKey', 'encryption_key': ''});\n    }\n    if(auth_state['@type']==='authorizationStateWaitTdlibParameters'){\n        TdLib.sendQuery({\n            '@type': 'setTdlibParameters',\n            'parameters': {\n                'database_directory': 'tdlib',\n                'use_message_database': true,\n                'use_secret_chats': true,\n                'api_id': credentials.api_id,\n                'api_hash': credentials.api_hash,\n                'system_language_code': 'en',\n                'device_model': 'Web',\n                'application_version': '0.0.1',\n                'enable_storage_optimizer': true,\n                'use_test_dc': getConfig().use_test_dc,\n            }\n        });\n    }\n});\n\nexport default class {\n    static async givePhoneNumber(number) {\n        return await TdLib.sendQuery({'@type': 'setAuthenticationPhoneNumber', 'phone_number': number});\n    }\n    static async checkAuthCode(code) {\n        return await TdLib.sendQuery({'@type': 'checkAuthenticationCode', 'code': code});\n    }\n    static async check2FACode(pass) {\n        return await TdLib.sendQuery({'@type': 'checkAuthenticationPassword', 'password': pass});\n    }\n    static async registerNewAccount(first, last) {\n        return await TdLib.sendQuery({'@type': 'registerUser', 'first_name': first, 'last_name': last});\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function BigHighlightedButton (props) {\n    return (\n        <button className=\"big-highlighted-button\" onClick={props.onClick}>\n            {props.children}\n        </button>\n    );\n}\nBigHighlightedButton.propTypes= {\n    onClick: PropTypes.func,\n    children: PropTypes.node.isRequired\n};","import { ProgressRing } from 'progress-ring';\nimport 'progress-ring/src/styles.css';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class LoadingSpinner extends React.Component {\n    static props= {\n        size: PropTypes.number.isRequired,\n        lineWidth: PropTypes.number.isRequired,\n        progressColor: PropTypes.string.isRequired\n    }\n    state= {\n        percentage: 10\n    }\n    render () {\n        return (\n            <div className=\"loading-spinner\">\n                <ProgressRing\n                    percent={this.state.percentage}\n                    caps='round'\n                    trackColor=\"transparent\"\n                    spin=\"true\"\n                    {...this.props}\n                    transitionDuration=\"2000\"/>\n            </div>\n        );\n    }\n\n    componentDidMount () {\n        this.intervalNum= setInterval(() => {\n            this.setState({\n                percentage: (90 - this.state.percentage)\n            });\n        }, 2000);\n    }\n\n    componentWillUnmount () {\n        clearInterval(this.intervalNum);\n    }\n}","import React from 'react';\nimport TdLib from '../../TdWeb/tdlib';\nimport LoadingSpinner from './loading-spinner';\n\nexport default class ConnectionState extends React.Component {\n    state= {\n        cState: 'connectionStateReady',\n    }\n    render () {\n        return (\n            <div className={'connectionState'+(([\n                'connectionStateConnecting',\n                'connectionStateConnectingToProxy',\n                'connectionStateWaitingForNetwork'\n            ].includes(this.state.cState))? '' : ' connected')}>\n                <LoadingSpinner\n                    progressColor=\"rgb(168, 168, 168)\"\n                    size=\"20\"\n                    lineWidth=\"2\"/>\n            </div>\n        );\n    }\n    handleUpdate = (update) => {\n        this.setState({\n            cState: update.state['@type']\n        });\n    }\n    componentDidMount () {\n        TdLib.registerUpdateHandler('updateConnectionState', this.handleUpdate);\n    }\n    componentWillUnmount () {\n        TdLib.registerUpdateHandler('updateConnectionState', this.handleUpdate);\n    }\n\n}","import { createStore } from 'redux';\nimport TdLib from '../TdWeb/tdlib';\n\nconst chatFiltersStore= createStore(reducer, \n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\n// eslint-disable-next-line no-unused-vars\nfunction reducer(state= [], action) {\n    if(action.type=='REPLACE_CHAT_FILTERS') {\n        return action.payload;\n    }\n}\n\nfunction onUpdateChatFilters(update) {\n    if(update.chat_filters) {\n        chatFiltersStore.dispatch({\n            type: 'REPLACE_CHAT_FILTERS',\n            payload: update.chat_filters\n        });\n    }\n}\nTdLib.registerUpdateHandler('updateChatFilters',onUpdateChatFilters);\n\nexport default chatFiltersStore;","import React from 'react';\n\nexport default function ChatFolderList() {\n    return (\n        <div id=\"chat-folders-list\">\n            <ul>\n\n            </ul>\n        </div>\n    );\n}","import React from 'react';\nimport { connect, Provider } from 'react-redux';\nimport ConnectionState from '../../../ui/elements/connecting';\nimport chatFiltersStore from '../../chat-filters';\nimport ChatFolderList from './chat-folders';\n\n\nconst NavMenu = connect(function (state) {\n    return {useFolders: (state||[]).length!=0};\n})(function NavMenu(props) {\n    if(props.useFolders) {\n        return (\n            <div id=\"navigation-menu\" className=\"uses-folders\">\n                <ChatFolderList/>\n                <div id=\"chat-list-container\">\n                    <ConnectionState/>\n                </div>\n            </div>\n        );\n    } else {\n        return (\n            <div id=\"navigation-menu\">\n\n            </div>\n        );\n    }\n});\n\nexport default function NavigationMenu() {\n    return (\n        <Provider store={chatFiltersStore}>\n            <NavMenu/>\n        </Provider>\n    );\n}","import React from 'react';\nimport TdLib from '../TdWeb/tdlib';\nimport BigHighlightedButton from '../ui/elements/highlighted-button';\nimport NavigationMenu from './ui/navigation-menu/navigation-menu';\n\nexport function MessengerWindow () {\n    function logOut() {\n        TdLib.sendQuery({\n            '@type': 'logOut'\n        });\n    }\n    return (\n        <div id=\"messenger-screen\">\n            <NavigationMenu/>\n            <div id=\"chat-container\">\n                This is messenger window. You&apos;ve authenticated successfully!\n                <BigHighlightedButton onClick={logOut}>Log out</BigHighlightedButton>\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class UnderlinedInput extends React.Component {\n    constructor(args) {\n        super(args);\n\n        this.state= {\n            inactive: false,\n            mouseX: '50%',\n            titleClass: this.getTitleClass(this.props.autoFocus)\n        };\n    }\n\n    getTitleClass (focus) {\n        return (focus || (!!this.props.value)) ? 'title top' : 'title placeholder';\n    }\n\n    render () {\n        var className='underlined-input';\n        if(this.state.inactive) {\n            className+=' inactive';\n        }\n        if(this.props.autoFocus) {\n            className+=' autoFocus';\n        }\n        if(this.props.invalid) {\n            className+=' invalid';\n        }\n        return (\n            <div className={className}\n                style={{'--mouse-left': this.state.mouseX || '50%'}}>\n                { this.props.title ? (\n                    <div className={this.state.titleClass}>{this.props.title}</div>\n                ) : null }\n                <input \n                    type={this.props.type} \n                    onChange={this.props.onChange} \n                    value={this.props.value}\n                    onMouseDown={this.handleMouseDown}\n                    onFocus={this.handleFocus}\n                    onBlur={this.handleBlur}\n                    autoFocus={this.props.autoFocus || false}\n                    onKeyDown={this.handleKeyDown}\n                    maxLength={this.props.maxLength}\n                    onCopy={e=> {\n                        if(this.props.disableCopy) {\n                            e.preventDefault();\n                        }\n                    }}/>\n                <div className=\"underline\"></div>\n            </div>\n        );\n    }\n\n    handleFocus =()=>{\n        this.setState({\n            inactive: false,\n            titleClass: this.getTitleClass(true)\n        });\n    }\n    handleBlur =()=>{\n        this.setState({\n            inactive: true, \n            mouseX: '50%',\n            titleClass: this.getTitleClass(false)\n        });\n    }\n    handleMouseDown =(e)=>{\n        this.setState({\n            mouseX: e.nativeEvent.offsetX+'px'\n        });\n    }\n    handleKeyDown =(e)=>{\n        if(e.key=='Enter') {\n            this.props.onEnterKeyPressed && this.props.onEnterKeyPressed();\n        }\n    }\n\n    static propTypes = {\n        type: PropTypes.oneOf(['text', 'number', 'password', 'email', 'url']).isRequired,\n        onChange: PropTypes.func,\n        value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        maxLength: PropTypes.number,\n        active: PropTypes.bool,\n        autoFocus: PropTypes.bool,\n        onEnterKeyPressed: PropTypes.func,\n        title: PropTypes.string,\n        invalid: PropTypes.bool,\n        disableCopy: PropTypes.bool,\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TdLib from '../TdWeb/tdlib';\nimport Auth from './auth';\nimport {MessengerWindow} from '../messenger/messengerWindow';\n\nimport BigHighlightedButton from '../ui/elements/highlighted-button';\nimport UnderlinedInput from '../ui/elements/underlined-input';\nimport ConnectionState from '../ui/elements/connecting';\n\nvar initialAuthState = {'@type': undefined};\nexport function setInitialAuthState(state) {\n    initialAuthState=state;\n}\n\nexport class MainApp extends React.Component {\n    constructor(args) {\n        super(args);\n\n        this.state= {\n            step: initialAuthState\n        };\n        // eslint-disable-next-line no-func-assign\n        setInitialAuthState= state=> {\n            this.setState({step: state});\n        };\n\n        TdLib.registerUpdateHandler('updateAuthorizationState', update => {\n            const states= [\n                'authorizationStateWaitPhoneNumber',\n                'authorizationStateWaitCode',\n                'authorizationStateWaitPassword',\n                'authorizationStateWaitRegistration',\n                'authorizationStateReady',\n                'authorizationStateClosed',\n            ];\n            const state=update['authorization_state'];\n            if(states.includes(state['@type'])) {\n                this.setState({step: state});\n            }\n        });\n    }\n    \n    render () {\n        switch (this.state.step['@type']) {\n        case 'authorizationStateWaitPhoneNumber':\n            return (\n                <AuthWindowStepPhoneNumber/>\n            );\n\n        case 'authorizationStateWaitCode':\n            return (\n                <AuthWindowStepCode info={this.state.step.code_info}/>\n            );\n\n        case 'authorizationStateWaitPassword':\n            return (\n                <AuthWindowStepPassword info={this.state.step}/>\n            );\n\n        case 'authorizationStateWaitRegistration':\n            return (\n                <AuthWindowStepRegister/>\n            );\n\n        case 'authorizationStateReady':\n            return (\n                <MessengerWindow/>\n            );\n\n        case 'authorizationStateClosed':\n            window.location.reload();\n            return (\n                <p>This session is closed. Please wait till DIBgram reloads automatically...</p>\n            );\n        \n        default:\n            return <p>Loading...</p>;\n        }\n    }\n}\n\nclass AuthWindowStepPhoneNumber extends React.Component {\n    state= {\n        number: ''\n    };\n    handlePNFieldChange = (event) => {\n        this.setState({number: event.target.value});\n    }\n    submitNumber= async () => {\n        Auth.givePhoneNumber(this.state.number).catch(reason=> {\n            this.setState({textUnderField: reason.message});\n        });\n    }\n    render () {\n        return (\n            <div id=\"auth\" className=\"auth-step-phoneNumber\">\n\n                <h2>Your Phone Number</h2>\n\n                <p className=\"description\">\n                    Please confirm your country code and enter your mobile phone number.\n                </p>\n\n                <UnderlinedInput \n                    type=\"text\" \n                    value={this.state.number} \n                    autoFocus={true}\n                    onChange={this.handlePNFieldChange}\n                    onEnterKeyPressed={this.submitNumber}/>\n\n                <div className=\"status\">\n                    {this.state.textUnderField || <span>&nbsp;</span>}\n                </div>\n\n                <BigHighlightedButton \n                    onClick={this.submitNumber}>\n                    NEXT\n                </BigHighlightedButton>\n\n                <ConnectionState/>\n            </div>\n        );\n    }\n}\n\nclass AuthWindowStepCode extends React.Component {\n    static propTypes= {\n        info: PropTypes.object\n    };\n    state= {\n        code: '',\n        invalid: false,\n    };\n    handleCodeFieldChange= (event) => {\n        this.setState({\n            code: event.target.value,\n            invalid: false\n        });\n        if(event.target.value.length==this.props.info.type.length) {\n            this.handleContinueButton(event.target.value);\n        }\n    }\n    handleContinueButton= (code) => {\n        if(typeof code != 'string') {\n            code= undefined;\n        }\n        code = code || this.state.code;\n        if(code.length!=this.props.info.type.length) return;\n\n        Auth.checkAuthCode(code).catch(reason=> {\n            if(reason.message==='PHONE_CODE_INVALID'){\n                this.setState({\n                    textUnderField: 'You have entered an invalid code.',\n                    invalid: true\n                });\n            }\n            else\n                this.setState({\n                    textUnderField: reason.message,\n                    invalid: true\n                });\n        });\n    }\n    render () {\n        var message= (this.props.info.type['@type']=='authenticationCodeTypeSms') ?\n            (<p className=\"description\">\n                A code was sent <strong>via SMS</strong> to your phone number.\n            </p>) \n            :\n            (<p className=\"description\">\n                A code was sent <strong>via Telegram</strong> to your other devices, if you have any connected.\n            </p>);\n            \n        return (\n            <div id=\"auth\" className=\"auth-step-code\">\n\n                <h2>{this.props.info.phone_number}</h2>\n\n                {message}\n\n                <UnderlinedInput \n                    type=\"text\" \n                    value={this.state.code} \n                    onChange={this.handleCodeFieldChange}\n                    autoFocus={true}\n                    title=\"Code\"\n                    maxLength={this.props.info.type.length}\n                    onEnterKeyPressed={this.handleContinueButton}\n                    invalid={this.state.invalid}/>\n\n                <div className=\"status\">\n                    {this.state.textUnderField || ''}\n                </div>\n\n                <BigHighlightedButton \n                    onClick={this.handleContinueButton}>\n                    NEXT\n                </BigHighlightedButton>\n\n                <ConnectionState/>\n            </div>\n        );\n    }\n}\n\nclass AuthWindowStepPassword extends React.Component {\n    static propTypes= {\n        info: PropTypes.object\n    };\n    state= {\n        password: '',\n        invalid: false\n    };\n    handlePasswordFieldChange= (event) => {\n        this.setState({\n            password: event.target.value,\n            invalid: false,\n        });\n    }\n    handleContinueButton= async () => {\n        Auth.check2FACode(this.state.password).catch(reason=> {\n            if(reason.message=='PASSWORD_HASH_INVALID') \n                this.setState({\n                    textUnderField: 'You have entered a wrong password.',\n                    invalid: true,\n                });\n            else\n                this.setState({\n                    textUnderField: reason.message,\n                    invalid: true,\n                });\n        });\n    }\n    render () {\n        return (\n            <div id=\"auth\" className=\"auth-step-password\">\n                <div className=\"content\">\n\n                    <h2>Cloud password check</h2>\n\n                    <p className=\"description\">\n                        Please enter your cloud password.\n                    </p>\n\n                    <UnderlinedInput \n                        type=\"text\" \n                        value={this.state.password} \n                        onChange={this.handlePasswordFieldChange}\n                        autoFocus={true} \n                        title=\"Your cloud password\"\n                        onEnterKeyPressed={this.handleContinueButton}\n                        disableCopy={true}\n                        invalid={this.state.invalid}/>\n\n                    <div className=\"hint\">\n                        Hint: {this.props.info.password_hint}\n                    </div>\n\n                    <div className=\"forgot-password\">\n                        <a href=\"#\">Forgot password?</a>\n                    </div>\n\n                    <div className=\"status\">\n                        {this.state.textUnderField || <i>&nbsp;</i>}\n                    </div>\n\n                    <BigHighlightedButton \n                        onClick={this.handleContinueButton}>\n                        SUBMIT\n                    </BigHighlightedButton>\n\n                    <ConnectionState/>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass AuthWindowStepRegister extends React.Component {\n    state= {\n        firstName: '',\n        lastName: ''\n    };\n    handleFirstNameFieldChange= (event) => {\n        this.setState({firstName: event.target.value});\n    }\n    handleLastNameFieldChange= (event) => {\n        this.setState({lastName: event.target.value});\n    }\n    handleContinueButton= async () => {\n        await Auth.registerNewAccount(this.state.firstName, this.state.lastName).catch(reason=> {\n            this.setState({textUnderField: reason.message});\n        });\n    }\n    render () {\n        return (\n            <div id=\"auth\" className=\"auth-step-signup\">\n                <div className=\"content\">\n\n                    <h2>Your info</h2>\n\n                    <p className=\"description\">\n                        Please enter your name and upload a photo.\n                    </p>\n\n                    <UnderlinedInput \n                        type=\"text\" \n                        value={this.state.firstName} \n                        onChange={this.handleFirstNameFieldChange}\n                        autoFocus={true} />\n\n                    <UnderlinedInput \n                        type=\"text\" \n                        value={this.state.lastName} \n                        onChange={this.handleLastNameFieldChange} />\n\n                    <div className=\"status\">\n                        {this.state.textUnderField || ''}\n                    </div>\n\n                    <BigHighlightedButton \n                        onClick={this.handleContinueButton}>\n                        SIGN UP\n                    </BigHighlightedButton>\n\n                    <ConnectionState/>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport {MainApp, setInitialAuthState} from './dibgram/auth/ui';\nimport TdLib from './dibgram/TdWeb/tdlib';\nimport './dibgram/ui/main.scss';\n\nTdLib.initializeTdLib().then(function (res) {\n    setInitialAuthState(res);\n});\nfunction App() {\n    return (\n        <div data-theme=\"classic\" id=\"app\">\n            <MainApp/>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}