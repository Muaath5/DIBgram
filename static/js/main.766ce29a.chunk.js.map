{"version":3,"sources":["dibgram/TdWeb/tdlib.js","dibgram/TdWeb/config.js","dibgram/auth/auth.js","dibgram/messenger/messengerWindow.js","dibgram/ui/elements/highlighted-button.js","dibgram/ui/elements/underlined-input.js","dibgram/auth/ui.js","App.js","reportWebVitals.js","index.js"],"names":["TdLib","log","use_test_dc","log_updates","log_queries","TdClient","useDatabase","onUpdate","update","console","forEach","h","sendRequest","type","handler","undefined","push","query","send","registerUpdateHandler","credentials","api_id","api_hash","auth_state","number","code","pass","first","last","MessengerWindow","BigHighlightedButton","props","className","onClick","children","UnderlinedInput","args","handleFocus","setState","inactive","handleBlur","mouseX","handleMouseDown","e","nativeEvent","offsetX","state","this","style","onChange","value","onMouseDown","onFocus","onBlur","React","Component","initialAuthState","setInitialAuthState","MainApp","step","includes","info","code_info","AuthWindowStepPhoneNumber","handlePNFieldChange","event","target","handleContinueButton","a","Auth","givePhoneNumber","catch","reason","textUnderField","message","id","AuthWindowStepCode","handleCodeFieldChange","checkAuthCode","phone_number","AuthWindowStepPassword","handlePasswordFieldChange","password","check2FACode","password_hint","href","AuthWindowStepRegister","handleFirstNameFieldChange","firstName","handleLastNameFieldChange","lastName","registerNewAccount","initializeTdLib","then","res","App","data-theme","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.766ce29a.chunk.js","sourcesContent":["import TdClient from 'tdweb';\nimport {getConfig} from './config';\n\n/**\n * Provides options to communicate with the Tdweb library\n */\nexport default class TdLib {\n    /** @type TdClient */\n    static #tdClient;\n    /** @type {[string: Array<Function>]} */\n    static #updateHandlers={};\n\n    /**\n     * Creates the instance of Tdweb\n     */\n    static async initializeTdLib() {\n        const {log}= getConfig();\n        TdLib.#tdClient= new TdClient({\n            useDatabase: true,\n            onUpdate: function (update) {\n                if(log.log_updates) {\n                    console.log('Update: ',update);\n                }\n                if(TdLib.#updateHandlers[update['@type']]){\n                    TdLib.#updateHandlers[update['@type']].forEach(h => h(update));\n                }\n            }\n        });\n        return await TdLib.sendRequest({'@type': 'getAuthorizationState'});\n    }\n\n    /**\n     * Listen for updates from TdLib\n     * @param {string} type The type of the update to listen to. Look for TdLib API docs for types\n     * @param {Function} handler The function that gets called with the update object when the update is received\n     */\n    static registerUpdateHandler(type, handler) {\n        if(TdLib.#updateHandlers[type]===undefined){\n            TdLib.#updateHandlers[type]= [];\n        }\n        TdLib.#updateHandlers[type].push(handler);\n    }\n\n    /**\n     * Send a request to the TdLib instance\n     * If the query contains an `@extra` field, the same field will be added to the result\n     * @param {import('tdweb').TdObject} query The request to send. Consult TdLib & JSON interface API for help.\n     */\n    static sendRequest(query) {\n        const {log}= getConfig();\n        if(log.log_queries) {\n            console.log('Query: ',query);\n        }\n        return TdLib.#tdClient.send(query);\n    }\n}","export function getCredentials() {return {api_id: 3022678,api_hash: 'd7b7676a82906a6182f4a5e5e9555673'};}export function getConfig() {return {use_test_dc: false,log: {log_updates: false,log_queries: false}};}\n","import TdLib from '../TdWeb/tdlib';\nimport {getCredentials, getConfig} from '../TdWeb/config';\n\nTdLib.registerUpdateHandler('updateAuthorizationState',function (update) {\n    const credentials= getCredentials();\n    const auth_state= update['authorization_state'];\n    \n    if(auth_state['@type']==='authorizationStateWaitEncryptionKey'){\n        TdLib.sendRequest({'@type': 'checkDatabaseEncryptionKey', 'encryption_key': ''});\n    }\n    if(auth_state['@type']==='authorizationStateWaitTdlibParameters'){\n        TdLib.sendRequest({\n            '@type': 'setTdlibParameters',\n            'parameters': {\n                'database_directory': 'tdlib',\n                'use_message_database': true,\n                'use_secret_chats': true,\n                'api_id': credentials.api_id,\n                'api_hash': credentials.api_hash,\n                'system_language_code': 'en',\n                'device_model': 'Web',\n                'application_version': '0.0.1',\n                'enable_storage_optimizer': true,\n                'use_test_dc': getConfig().use_test_dc,\n            }\n        });\n    }\n});\n\nexport default class {\n    static async givePhoneNumber(number) {\n        return await TdLib.sendRequest({'@type': 'setAuthenticationPhoneNumber', 'phone_number': number});\n    }\n    static async checkAuthCode(code) {\n        return await TdLib.sendRequest({'@type': 'checkAuthenticationCode', 'code': code});\n    }\n    static async check2FACode(pass) {\n        return await TdLib.sendRequest({'@type': 'checkAuthenticationPassword', 'password': pass});\n    }\n    static async registerNewAccount(first, last) {\n        return await TdLib.sendRequest({'@type': 'registerUser', 'first_name': first, 'last_name': last});\n    }\n}","import React from 'react';\n\nexport function MessengerWindow () {\n    return (\n        <div>This is messenger window. You&apos;ve authenticated successfully!</div>\n    );\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function BigHighlightedButton (props) {\n    return (\n        <button className=\"big-highlighted-button\" onClick={props.onClick}>\n            {props.children}\n        </button>\n    );\n}\nBigHighlightedButton.propTypes= {\n    onClick: PropTypes.func,\n    children: PropTypes.node.isRequired\n};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class UnderlinedInput extends React.Component {\n    constructor(args) {\n        super(args);\n\n        this.state= {\n            inactive: false,\n            mouseX: '50%'\n        };\n    }\n\n    render () {\n        var className='underlined-input';\n        if(this.state.inactive) {\n            className+=' inactive';\n        }\n        return (\n            <div className={className}\n                style={{'--mouse-left': this.state.mouseX || '50%'}}>\n                <input \n                    type={this.props.type} \n                    onChange={this.props.onChange} \n                    value={this.props.value}\n                    onMouseDown={this.handleMouseDown}\n                    onFocus={this.handleFocus}\n                    onBlur={this.handleBlur}/>\n                <div className=\"underline\"></div>\n            </div>\n        );\n    }\n\n    handleFocus =()=>{\n        this.setState({\n            inactive: false\n        });\n        console.log('focus');\n    }\n    handleBlur =()=>{\n        this.setState({inactive: true, mouseX: '50%'});\n    }\n    handleMouseDown =(e)=>{\n        console.log('click');\n        this.setState({\n            mouseX: e.nativeEvent.offsetX+'px'\n        });\n    }\n\n    static propTypes = {\n        type: PropTypes.oneOf(['text', 'number', 'password', 'email', 'url']).isRequired,\n        onChange: PropTypes.func,\n        value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        active: PropTypes.bool\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TdLib from '../TdWeb/tdlib';\nimport Auth from './auth';\nimport {MessengerWindow} from '../messenger/messengerWindow';\n\nimport BigHighlightedButton from '../ui/elements/highlighted-button';\nimport UnderlinedInput from '../ui/elements/underlined-input';\n\nvar initialAuthState = {'@type': undefined};\nexport function setInitialAuthState(state) {\n    initialAuthState=state;\n}\n\nexport class MainApp extends React.Component {\n    constructor(args) {\n        super(args);\n\n        this.state= {\n            step: initialAuthState\n        };\n        // eslint-disable-next-line no-func-assign\n        setInitialAuthState= state=> {\n            this.setState({step: state});\n        };\n\n        TdLib.registerUpdateHandler('updateAuthorizationState', update => {\n            const states= [\n                'authorizationStateWaitPhoneNumber',\n                'authorizationStateWaitCode',\n                'authorizationStateWaitPassword',\n                'authorizationStateWaitRegistration',\n                'authorizationStateReady',\n                'authorizationStateClosed',\n            ];\n            const state=update['authorization_state'];\n            if(states.includes(state['@type'])) {\n                this.setState({step: state});\n            }\n        });\n    }\n    \n    render () {\n        switch (this.state.step['@type']) {\n        case 'authorizationStateWaitPhoneNumber':\n            return (\n                <AuthWindowStepPhoneNumber/>\n            );\n\n        case 'authorizationStateWaitCode':\n            return (\n                <AuthWindowStepCode info={this.state.step.code_info}/>\n            );\n\n        case 'authorizationStateWaitPassword':\n            return (\n                <AuthWindowStepPassword info={this.state.step}/>\n            );\n\n        case 'authorizationStateWaitRegistration':\n            return (\n                <AuthWindowStepRegister/>\n            );\n\n        case 'authorizationStateReady':\n            return (\n                <MessengerWindow/>\n            );\n\n        case 'authorizationStateClosed':\n            return (\n                <p>This session is closed.</p>\n            );\n        \n        default:\n            return <p>Loading...</p>;\n        }\n    }\n}\n\nclass AuthWindowStepPhoneNumber extends React.Component {\n    constructor (args) {\n        super(args);\n\n        this.state= {\n            number: ''\n        };\n    }\n    handlePNFieldChange = (event) => {\n        this.setState({number: event.target.value});\n    }\n    handleContinueButton= async () => {\n        Auth.givePhoneNumber(this.state.number).catch(reason=> {\n            this.setState({textUnderField: reason.message});\n        });\n    }\n    render () {\n        return (\n            <div id=\"auth\" className=\"auth-step-phoneNumber\">\n                <h2>Your Phone Number</h2>\n                <p className=\"description\">Please confirm your country code and enter your mobile phone number.</p>\n                <UnderlinedInput type=\"text\" value={this.state.number} onChange={this.handlePNFieldChange} />\n                <div className=\"status\">{this.state.textUnderField || <span>&nbsp;</span>}</div>\n                <BigHighlightedButton onClick={this.handleContinueButton}>NEXT</BigHighlightedButton>\n            </div>\n        );\n    }\n}\n\nclass AuthWindowStepCode extends React.Component {\n    constructor (args) {\n        super(args);\n\n        this.state= {\n            code: ''\n        };\n    }\n    handleCodeFieldChange= (event) => {\n        this.setState({code: event.target.value});\n    }\n    handleContinueButton= async () => {\n        Auth.checkAuthCode(this.state.code).catch(reason=> {\n            if(reason.message==='PHONE_CODE_INVALID'){\n                this.setState({textUnderField: 'Code is invalid'});\n            }\n            else\n                this.setState({textUnderField: reason.message});\n        });\n    }\n    render () {\n        var message= (this.props.info.type['@type']=='authenticationCodeTypeSms') ?\n            <p className=\"description\">Please enter the verification code you received as SMS:</p> :\n            <p className=\"description\">A code was sent <b>via Telegram</b> to your other devices, if you have any connected.</p>;\n        return (\n            <div id=\"auth\" className=\"auth-state-code\">\n                <h2>{this.props.info.phone_number}</h2>\n                {message}\n                <UnderlinedInput type=\"text\" value={this.state.code} onChange={this.handleCodeFieldChange} />\n                <div className=\"status\">{this.state.textUnderField || ''}</div>\n                <BigHighlightedButton onClick={this.handleContinueButton}>NEXT</BigHighlightedButton>\n            </div>\n        );\n    }\n}\nAuthWindowStepCode.propTypes= {\n    info: PropTypes.object\n};\nclass AuthWindowStepPassword extends React.Component {\n    constructor (args) {\n        super(args);\n\n        this.state= {\n            password: ''\n        };\n    }\n    handlePasswordFieldChange= (event) => {\n        this.setState({password: event.target.value});\n    }\n    handleContinueButton= async () => {\n        Auth.check2FACode(this.state.password).catch(reason=> {\n            if(reason.message=='PASSWORD_HASH_INVALID') \n                this.setState({textUnderField: 'You have entered a wrong password.'});\n            else\n                this.setState({textUnderField: reason.message});\n        });\n    }\n    render () {\n        return (\n            <div id=\"auth\" className=\"auth-state-password\">\n                <div className=\"content\">\n                    <h2>Cloud password check</h2>\n                    <p className=\"description\">Please enter your cloud password.</p>\n                    <UnderlinedInput type=\"text\" value={this.state.password} onChange={this.handlePasswordFieldChange} />\n                    <div className=\"hint\">Hint: {this.props.info.password_hint}</div>\n                    <div className=\"forgot-password\"><a href=\"#\">Forgot password?</a></div>\n                    <div className=\"status\">{this.state.textUnderField || <i>&nbsp;</i>}</div>\n                    <BigHighlightedButton onClick={this.handleContinueButton}>SUBMIT</BigHighlightedButton>\n                </div>\n            </div>\n        );\n    }\n}\nAuthWindowStepPassword.propTypes= {\n    info: PropTypes.object\n};\n\nclass AuthWindowStepRegister extends React.Component {\n    constructor (args) {\n        super(args);\n\n        this.state= {\n            firstName: '',\n            lastName: ''\n        };\n    }\n    handleFirstNameFieldChange= (event) => {\n        this.setState({firstName: event.target.value});\n    }\n    handleLastNameFieldChange= (event) => {\n        this.setState({lastName: event.target.value});\n    }\n    handleContinueButton= async () => {\n        await Auth.registerNewAccount(this.state.firstName, this.state.lastName).catch(reason=> {\n            this.setState({textUnderField: reason.message});\n        });\n    }\n    render () {\n        return (\n            <div id=\"auth\" className=\"auth-state-signup\">\n                <div className=\"content\">\n                    <h2>Your info</h2>\n                    <p className=\"description\">Please enter your name and upload a photo.</p>\n                    <UnderlinedInput type=\"text\" value={this.state.firstName} onChange={this.handleFirstNameFieldChange} />\n                    <UnderlinedInput type=\"text\" value={this.state.lastName} onChange={this.handleLastNameFieldChange} />\n                    <div className=\"status\">{this.state.textUnderField || ''}</div>\n                    <BigHighlightedButton onClick={this.handleContinueButton}>SIGN UP</BigHighlightedButton>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport {MainApp, setInitialAuthState} from './dibgram/auth/ui';\nimport TdLib from './dibgram/TdWeb/tdlib';\nimport './dibgram/ui/main.scss';\n\nTdLib.initializeTdLib().then(function (res) {\n    setInitialAuthState(res);\n});\nfunction App() {\n    return (\n        <div data-theme=\"classic\" id=\"app\">\n            <MainApp/>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}